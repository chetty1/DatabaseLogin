/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package databaselogin;

import eu.hansolo.steelseries.gauges.Radial;
import eu.hansolo.steelseries.tools.ColorDef;
//import javafx.scene.control.PasswordField;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Kesh
 */
public class Login extends javax.swing.JFrame {

    double startSession,endSession;
    String username,password,macaddr;
    String ip;
    static double risk = 1;
   static riskMeter r = new riskMeter();
    double keystrokeDynamics;
    static long startSelected;
    static long stopSelected;
    RegDb db;
    LoginDb db1;
    int count =0;
    Client c;
    RiskEngine riskEngine;


    /**
     * Creates new form Form
     */
    public Login() throws SQLException {
        db=new RegDb();
        db1 = new LoginDb();
        initComponents();
        setLocationRelativeTo(null);
       // createMeter();
        createAndShowUI();
        startSession=System.currentTimeMillis()/1000.0;

    }



    private void createAndShowUI() {
        r.createAndShowUI();
    }
    
    public void getIpAndMac(){
        try{
            ip= InetAddress.getLocalHost().getHostAddress();

            NetworkInterface network = NetworkInterface.getByInetAddress(InetAddress.getLocalHost());

            byte[] mac = network.getHardwareAddress();

            StringBuilder sb = new StringBuilder();
            for(int i=0; i < mac.length;i++){
                sb.append(String.format("%02X%s", mac[i], (i<mac.length-1) ? "-" : ""));
            }
            macaddr = sb.toString();

        }catch (UnknownHostException ex){
            ex.printStackTrace();
        } catch (SocketException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        UsernameLabel = new javax.swing.JLabel();
        PasswordLabel = new javax.swing.JLabel();
        UsernameTextField = new javax.swing.JTextField();
        RegisterButton = new javax.swing.JButton();
        PasswordField = new javax.swing.JPasswordField();
        LoginButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Login");

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        UsernameLabel.setFont(new java.awt.Font("Cooper Black", 0, 18)); // NOI18N
        UsernameLabel.setForeground(new java.awt.Color(250, 0, 0));
        UsernameLabel.setText("Username:");

        PasswordLabel.setFont(new java.awt.Font("Cooper Black", 0, 18)); // NOI18N
        PasswordLabel.setForeground(new java.awt.Color(250, 0, 0));
        PasswordLabel.setText("Password:");

        RegisterButton.setBackground(new java.awt.Color(250, 0, 0));
        RegisterButton.setFont(new java.awt.Font("Cooper Black", 0, 12)); // NOI18N
        RegisterButton.setText("Register");
        RegisterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterButtonActionPerformed(evt);
            }
        });

        PasswordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PasswordFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                PasswordFieldFocusLost(evt);
            }
        });

        LoginButton.setBackground(new java.awt.Color(250, 0, 0));
        LoginButton.setFont(new java.awt.Font("Cooper Black", 0, 12)); // NOI18N
        LoginButton.setText("Login");
        LoginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    LoginButtonActionPerformed(evt);
                } catch (SQLException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(LoginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addComponent(RegisterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(UsernameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(UsernameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                    .addComponent(PasswordField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UsernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PasswordLabel)
                    .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegisterButton)
                    .addComponent(LoginButton))
                .addGap(77, 77, 77))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoginButtonActionPerformed(java.awt.event.ActionEvent evt) throws SQLException, IOException {//GEN-FIRST:event_LoginButtonActionPerformed
        // TODO add your handling code here:
        endSession= System.currentTimeMillis()/1000.0;
        username = UsernameTextField.getText();
        password = new String(PasswordField.getPassword());
        getIpAndMac();
        System.out.println(ip);

   // risk = 2;

      c  =new Client();
        c.setIp(ip);
        c.setMac(macaddr);
        c.setKeyPressed(Math.round(keystrokeDynamics*100)/100.0);

        try {
            if(db.getDetails(username,password)==true) {
               //risk= 2;
                JOptionPane.showMessageDialog(this, "SUCCESS!", "SUCCESS",JOptionPane.ERROR_MESSAGE );

           }
        }
        catch (Exception e){
            //risk= 2;
            JOptionPane.showMessageDialog(this, "Incorrect!", "Error",JOptionPane.ERROR_MESSAGE );
            System.out.print(e);
            count++;
        }
        c.setLogin(count);


        c.setSessionDuration(Math.round((endSession-startSession)*100)/100.0);
        //try {

       /* } catch (IOException e) {
            e.printStackTrace();
        }*/
        int id = db1.getClientID();
       db1.updateClientRisk(c,db.returnID(username),c.getLogin(),id);

        try {

            riskEngine = new RiskEngine(username + ".arff", 3);
            String[] split = ip.split("[.]");
            double[] cred = new double[7];
            for(int i=0;i<split.length;i++)
            cred[i]= Integer.parseInt(split[i]);
            cred[4]=count;
            cred[5]=c.getKeyPressed();
            cred[6]=c.getSessionDuration();
            risk=riskEngine.calculateRisk(cred);
            System.out.println(String.valueOf(c.getKeyPressed())+" "+String.valueOf(c.getSessionDuration())+" "+String.valueOf(count));
            //createArff(username,ip,String.valueOf(count),String.valueOf(c.getKeyPressed()),String.valueOf(c.getSessionDuration()));
        }
        catch(Exception e){
            e.printStackTrace();
        }
        if (risk == 2) {
            Surephrase sure = new Surephrase(db.getSurephrase(username));
            sure.setLocationRelativeTo(null);
            sure.setVisible(true);

        }
        // calcKmean(username);
        r.update(risk);
    }//GEN-LAST:event_LoginButtonActionPerformed

    private void RegisterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterButtonActionPerformed
        // TODO add your handling code here:
        Register reg = new Register();
        reg.setLocationRelativeTo(null);
        reg.setVisible(true);
        setVisible(false);

    }//GEN-LAST:event_RegisterButtonActionPerformed

    private void PasswordFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PasswordFieldFocusGained
        // TODO add your handling code here:
        startSelected = System.currentTimeMillis();
    }//GEN-LAST:event_PasswordFieldFocusGained

    private void PasswordFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PasswordFieldFocusLost
        // TODO add your handling code here:
        stopSelected = System.currentTimeMillis();
        keystrokeDynamics = ((stopSelected-startSelected)/1000.0);
    }//GEN-LAST:event_PasswordFieldFocusLost

    public double getKeystrokeDynamics(){
        return keystrokeDynamics;
    }
    public void createArff(String name,String ip,String login,String key,String ses ) throws IOException {
        //File file = new File(name+".arff");
        //file.createNewFile();
        FileWriter fi = new FileWriter(name+".arff",true);

        BufferedWriter bf = new BufferedWriter(fi);
       /* bf.write("@relation 'Reuters-21578 Corn ModApte Test-weka.filters.unsupervised.attribute.NumericToBinary-weka.filters.unsupervised.instance.RemoveFolds-S0-N5-F1'\n" +
                "\n" +
                "@attribute ipPart1 Numeric\n" +
                "@attribute ipPart2 Numeric\n" +
                "@attribute ipPart3 Numeric\n" +
                "@attribute ipPart4 Numeric\n" +
                "@attribute LoginAttempts Numeric\n" +
                "@attribute CharacterPerSecond Numeric\n" +
                "@attribute SessionTimeInSeconds Numeric\n" +
                "\n" +
                "@data");*/
        ArrayList<String> list = new ArrayList<>();

        //  ip= ip.trim();
        String[] split = ip.split("[.]");

        for(int i =0;i<split.length;i++){
            list.add(split[i]);
        }

        list.add(login);
        list.add(key);
        list.add(ses);

        for (int i=0;i<list.size();i++){

            bf.write(list.get(i));
            if(i!=list.size()-1)
            bf.write(",");

        }

        bf.newLine();


        //bf.flush();
        bf.close();


    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                try {
                    new Login().setVisible(true);
                } catch (SQLException e) {
                    e.printStackTrace();
                }

            }
        });
    }

    // Variables declaratdfdsion - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton LoginButton;
    private javax.swing.JPasswordField PasswordField;
    private javax.swing.JLabel PasswordLabel;
    private javax.swing.JButton RegisterButton;
    private javax.swing.JLabel UsernameLabel;
    private javax.swing.JTextField UsernameTextField;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
