/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package databaselogin;

import java.awt.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.*;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Kesh
 */
public class Username extends javax.swing.JFrame {
    RegDb db;

    private String surephrase, macaddr ,name, Surname,ID,address1,address2,address3, email, cell, nokName, nokSurname, nokEmail, Username, Password,day,month,year,ip;
    InetAddress ip1;
    //RegDb db;
    /**
     * Creates new form Username
     */
    public Username() {
        initComponents();
    }

    public void getIpAndMac(){
        try{
            ip1= InetAddress.getLocalHost();

            ip = Inet4Address.getLocalHost().getHostAddress();
            NetworkInterface network = NetworkInterface.getByInetAddress(ip1);

            byte[] mac = network.getHardwareAddress();

            StringBuilder sb = new StringBuilder();
            for(int i=0; i < mac.length;i++){
                sb.append(String.format("%02X%s", mac[i], (i<mac.length-1) ? "-" : ""));
            }
            macaddr = sb.toString();

        }catch (UnknownHostException ex){
            ex.printStackTrace();
        } catch (SocketException e) {
            e.printStackTrace();
        }
    }

    public void initVar(String name, String Surname, String ID, String address1, String address2, String address3, String email, String cell, String nokName, String nokSurname, String nokEmail, String day, String month, String year,String surephrase){
        this.name       = cell;
        this.Surname    = Surname;
        this.ID         = ID;
        this.address1   = address1;
        this.address2   = address2;
        this.address3   = address3;
        this.email      = email;
        this.cell       = name;
        this.nokName    = nokName;
        this.nokSurname = nokSurname;
        this.nokEmail   = nokEmail;
        this.day = day;
        this.month = month;
        this.year = year;
        this.surephrase = surephrase;
        // db = new RegDb();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        usernameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        rePasswordLabel = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        PasswordField = new javax.swing.JPasswordField();
        rePasswordField = new javax.swing.JPasswordField();
        backButton = new javax.swing.JButton();
        createButton = new javax.swing.JButton();
        passCheck = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Registeration");

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        usernameLabel.setFont(new java.awt.Font("Cooper Black", 0, 18)); // NOI18N
        usernameLabel.setForeground(new java.awt.Color(250, 0, 0));
        usernameLabel.setText("Username:");

        passwordLabel.setFont(new java.awt.Font("Cooper Black", 0, 18)); // NOI18N
        passwordLabel.setForeground(new java.awt.Color(250, 0, 0));
        passwordLabel.setText("Password:");

        rePasswordLabel.setFont(new java.awt.Font("Cooper Black", 0, 18)); // NOI18N
        rePasswordLabel.setForeground(new java.awt.Color(250, 0, 0));
        rePasswordLabel.setText("Re-type Password:");

        PasswordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PasswordFieldFocusGained(evt);
            }
        });

        backButton.setBackground(new java.awt.Color(250, 0, 0));
        backButton.setFont(new java.awt.Font("Cooper Black", 0, 12)); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        createButton.setBackground(new java.awt.Color(250, 0, 0));
        createButton.setFont(new java.awt.Font("Cooper Black", 0, 12)); // NOI18N
        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    createButtonActionPerformed(evt);
                } catch (SQLException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

        passCheck.setText("X");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(usernameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(passwordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rePasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(usernameTextField)
                            .addComponent(PasswordField)
                            .addComponent(rePasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(passCheck))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)
                        .addComponent(createButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passwordLabel)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(passCheck)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rePasswordLabel)
                    .addComponent(rePasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(createButton))
                .addContainerGap(70, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void createArff(String name,String ip,String login,String key,String ses ) throws IOException {
        File file = new File(name+".arff");
        file.createNewFile();
        FileWriter fi = new FileWriter(file);

        BufferedWriter bf = new BufferedWriter(fi);
        bf.write("@relation 'Reuters-21578 Corn ModApte Test-weka.filters.unsupervised.attribute.NumericToBinary-weka.filters.unsupervised.instance.RemoveFolds-S0-N5-F1'\n" +
                "\n" +
                "@attribute ipPart1 Numeric\n" +
                "@attribute ipPart2 Numeric\n" +
                "@attribute ipPart3 Numeric\n" +
                "@attribute ipPart4 Numeric\n" +
                "@attribute LoginAttempts Numeric\n" +
                "@attribute CharacterPerSecond Numeric\n" +
                "@attribute SessionTimeInSeconds Numeric\n" +
                "\n" +
                "@data");
      /*  ArrayList<String> list = new ArrayList<>();
        list.add(ses);
        list.add(key);
        list.add(login);
        //  ip= ip.trim();
        String[] split = ip.split("[.]");

        for(int i =0;i<split.length;i++){
            list.add(split[i]);
        }

       for (int i=0;i<list.size();i++){
            bf.write(",");
            bf.write(list.get(i));


        }*/
        bf.newLine();


        //bf.flush();
        bf.close();


    }
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        Register reg = new Register();
        reg.setLocationRelativeTo(null);
        reg.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_backButtonActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) throws SQLException, IOException {//GEN-FIRST:event_createButtonActionPerformed
        // TODO add your handling code here:        
        if(Arrays.toString(PasswordField.getPassword()).equals(Arrays.toString(rePasswordField.getPassword()))){
            Username = usernameTextField.getText();
            Password = new String(PasswordField.getPassword());
            getIpAndMac();
            Client c = new Client(Username,  Password,name, Surname, ID, address1, address2, address3, email, cell, nokName, nokSurname, nokEmail, day, month, year,  ip, macaddr,surephrase,(int)(Math.random()*100),(int) (Math.random()*100),0);
            System.out.println(c);
            db= new RegDb();
            createArff(Username,ip,"0",String.valueOf(c.getKeyPressed()),String.valueOf(c.getSessionDuration()));
           int id= db.getClientID();
            db.updateClientInfo(c,id);
            db.updateClientRisk(c,id);

        }
        else{
            JOptionPane.showMessageDialog(this, "Password does not match!", "Error",JOptionPane.ERROR_MESSAGE );
        }
    }//GEN-LAST:event_createButtonActionPerformed

    private void CheckPassword(JTextField txt, JLabel l){
        if(!txt.getText().matches("[a-zA-Z]+")){//change this
            createButton.setEnabled(false);
            l.setForeground(Color.red);


        }
        else{
            l.setForeground(Color.black);
            createButton.setEnabled(true);
        }


    }

    public void passwordDoclist(JTextField txt, JLabel l){
        txt.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                CheckPassword(txt, l);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                CheckPassword(txt, l);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                CheckPassword(txt, l);
            }
        });

    }

    private void PasswordFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PasswordFieldFocusGained
        // TODO add your handling code here:
        CheckPassword(rePasswordField,passCheck);
    }//GEN-LAST:event_PasswordFieldFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws SQLException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Username.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Username.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Username.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Username.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new Username().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField PasswordField;
    private javax.swing.JButton backButton;
    private javax.swing.JButton createButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel passCheck;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField rePasswordField;
    private javax.swing.JLabel rePasswordLabel;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}
